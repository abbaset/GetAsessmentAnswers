// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace GetAsessmentAnswers.Models;

public partial class AssessmentsContext : DbContext
{
    public AssessmentsContext(DbContextOptions<AssessmentsContext> options)
        : base(options)
    {
    }

    public virtual DbSet<assessment> assessments { get; set; }

    public virtual DbSet<assessment_answer> assessment_answers { get; set; }

    public virtual DbSet<assessment_datum> assessment_data { get; set; }

    public virtual DbSet<assessment_department> assessment_departments { get; set; }

    public virtual DbSet<assessment_enrol> assessment_enrols { get; set; }

    public virtual DbSet<assessment_match> assessment_matches { get; set; }

    public virtual DbSet<assessment_metum> assessment_meta { get; set; }

    public virtual DbSet<assessment_option> assessment_options { get; set; }

    public virtual DbSet<assessment_question> assessment_questions { get; set; }

    public virtual DbSet<assessment_questions_relation> assessment_questions_relations { get; set; }

    public virtual DbSet<assessment_section> assessment_sections { get; set; }

    public virtual DbSet<assessment_text> assessment_texts { get; set; }

    public virtual DbSet<assessment_true_false> assessment_true_falses { get; set; }

    public virtual DbSet<user> users { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<assessment>(entity =>
        {
            entity.HasKey(e => e.id).HasName("PK__assessme__3213E83F22683AEC");

            entity.Property(e => e.created_at).HasColumnType("datetime");
            entity.Property(e => e.description).HasColumnType("text");
            entity.Property(e => e.duration).HasDefaultValueSql("('7')");
            entity.Property(e => e.published).HasDefaultValueSql("('1')");
            entity.Property(e => e.short_description).HasColumnType("text");
            entity.Property(e => e.slug)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.thumbnail)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.title)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.updated_at).HasColumnType("datetime");
        });

        modelBuilder.Entity<assessment_answer>(entity =>
        {
            entity.Property(e => e.answer)
                .IsRequired()
                .HasColumnType("text");
            entity.Property(e => e.created_at).HasColumnType("datetime");
            entity.Property(e => e.score).HasDefaultValueSql("('0')");
            entity.Property(e => e.updated_at).HasColumnType("datetime");

            entity.HasOne(d => d.assessment).WithMany(p => p.assessment_answers)
                .HasForeignKey(d => d.assessment_id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_assessment_answers_assessments");

            entity.HasOne(d => d.question).WithMany(p => p.assessment_answers)
                .HasForeignKey(d => d.question_id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_assessment_answers_assessment_questions");

            entity.HasOne(d => d.user).WithMany(p => p.assessment_answers)
                .HasForeignKey(d => d.user_id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_assessment_answers_users");
        });

        modelBuilder.Entity<assessment_datum>(entity =>
        {
            entity.Property(e => e.created_at).HasColumnType("datetime");
            entity.Property(e => e.data).HasColumnType("text");
            entity.Property(e => e.updated_at).HasColumnType("datetime");

            entity.HasOne(d => d.assessment).WithMany(p => p.assessment_data)
                .HasForeignKey(d => d.assessment_id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_assessment_data_assessments");
        });

        modelBuilder.Entity<assessment_department>(entity =>
        {
            entity.ToTable("assessment_department");

            entity.Property(e => e.created_at).HasColumnType("datetime");
            entity.Property(e => e.updated_at).HasColumnType("datetime");

            entity.HasOne(d => d.assessment).WithMany(p => p.assessment_departments)
                .HasForeignKey(d => d.assessment_id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_assessment_department_assessments");
        });

        modelBuilder.Entity<assessment_enrol>(entity =>
        {
            entity.Property(e => e.created_at).HasColumnType("datetime");
            entity.Property(e => e.score).HasDefaultValueSql("('0')");
            entity.Property(e => e.updated_at).HasColumnType("datetime");

            entity.HasOne(d => d.assessment).WithMany(p => p.assessment_enrols)
                .HasForeignKey(d => d.assessment_id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_assessment_enrols_assessments");

            entity.HasOne(d => d.user).WithMany(p => p.assessment_enrols)
                .HasForeignKey(d => d.user_id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_assessment_enrols_users");
        });

        modelBuilder.Entity<assessment_match>(entity =>
        {
            entity.ToTable("assessment_match");

            entity.HasIndex(e => e.answer_id_key, "IX_assessment_match").IsUnique();

            entity.HasIndex(e => e.question_id_key, "IX_assessment_match_1").IsUnique();

            entity.Property(e => e.answer).HasColumnType("text");
            entity.Property(e => e.answer_id_key)
                .IsRequired()
                .HasMaxLength(36)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.created_at).HasColumnType("datetime");
            entity.Property(e => e.option).HasColumnType("text");
            entity.Property(e => e.order).HasDefaultValueSql("('0')");
            entity.Property(e => e.question_id_key)
                .IsRequired()
                .HasMaxLength(36)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.updated_at).HasColumnType("datetime");

            entity.HasOne(d => d.question).WithMany(p => p.assessment_matches)
                .HasForeignKey(d => d.question_id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_assessment_match_assessment_questions");
        });

        modelBuilder.Entity<assessment_metum>(entity =>
        {
            entity.Property(e => e.created_at).HasColumnType("datetime");
            entity.Property(e => e.type).HasColumnType("text");
            entity.Property(e => e.updated_at).HasColumnType("datetime");
            entity.Property(e => e.value).HasColumnType("text");

            entity.HasOne(d => d.assessment).WithMany(p => p.assessment_meta)
                .HasForeignKey(d => d.assessment_id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_assessment_meta_assessments");
        });

        modelBuilder.Entity<assessment_option>(entity =>
        {
            entity.Property(e => e.correct).HasDefaultValueSql("('0')");
            entity.Property(e => e.created_at).HasColumnType("datetime");
            entity.Property(e => e.option).HasColumnType("text");
            entity.Property(e => e.order).HasDefaultValueSql("('0')");
            entity.Property(e => e.updated_at).HasColumnType("datetime");

            entity.HasOne(d => d.question).WithMany(p => p.assessment_options)
                .HasForeignKey(d => d.question_id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_assessment_options_assessment_questions");
        });

        modelBuilder.Entity<assessment_question>(entity =>
        {
            entity.Property(e => e.created_at).HasColumnType("datetime");
            entity.Property(e => e.level).HasDefaultValueSql("('0')");
            entity.Property(e => e.order).HasDefaultValueSql("('0')");
            entity.Property(e => e.question).HasColumnType("text");
            entity.Property(e => e.type).HasColumnType("text");
            entity.Property(e => e.updated_at).HasColumnType("datetime");
        });

        modelBuilder.Entity<assessment_questions_relation>(entity =>
        {
            entity.ToTable("assessment_questions_relation");

            entity.Property(e => e.created_at).HasColumnType("datetime");
            entity.Property(e => e.updated_at).HasColumnType("datetime");

            entity.HasOne(d => d.assessment).WithMany(p => p.assessment_questions_relations)
                .HasForeignKey(d => d.assessment_id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_assessment_questions_relation_assessments");

            entity.HasOne(d => d.question).WithMany(p => p.assessment_questions_relations)
                .HasForeignKey(d => d.question_id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_assessment_questions_relation_assessment_questions");
        });

        modelBuilder.Entity<assessment_section>(entity =>
        {
            entity.Property(e => e.created_at).HasColumnType("datetime");
            entity.Property(e => e.description).HasColumnType("text");
            entity.Property(e => e.order).HasDefaultValueSql("('0')");
            entity.Property(e => e.title)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.updated_at).HasColumnType("datetime");

            entity.HasOne(d => d.assessment).WithMany(p => p.assessment_sections)
                .HasForeignKey(d => d.assessment_id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_assessment_sections_assessments");
        });

        modelBuilder.Entity<assessment_text>(entity =>
        {
            entity.ToTable("assessment_text");

            entity.Property(e => e.answer).HasColumnType("text");
            entity.Property(e => e.created_at).HasColumnType("datetime");
            entity.Property(e => e.order).HasDefaultValueSql("('0')");
            entity.Property(e => e.updated_at).HasColumnType("datetime");

            entity.HasOne(d => d.question).WithMany(p => p.assessment_texts)
                .HasForeignKey(d => d.question_id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_assessment_text_assessment_questions");
        });

        modelBuilder.Entity<assessment_true_false>(entity =>
        {
            entity.ToTable("assessment_true_false");

            entity.Property(e => e.created_at).HasColumnType("datetime");
            entity.Property(e => e.is_true).HasDefaultValueSql("('0')");
            entity.Property(e => e.updated_at).HasColumnType("datetime");

            entity.HasOne(d => d.question).WithMany(p => p.assessment_true_falses)
                .HasForeignKey(d => d.question_id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_assessment_true_false_assessment_questions");
        });

        modelBuilder.Entity<user>(entity =>
        {
            entity.Property(e => e.api_key)
                .HasMaxLength(36)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.confirm_code)
                .IsRequired()
                .HasMaxLength(36)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.confirmed_at).HasColumnType("datetime");
            entity.Property(e => e.created_at).HasColumnType("datetime");
            entity.Property(e => e.deleted_at).HasColumnType("datetime");
            entity.Property(e => e.display_name)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.email)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.first_name)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.is_banned).HasDefaultValueSql("('0')");
            entity.Property(e => e.is_ldap).HasDefaultValueSql("('0')");
            entity.Property(e => e.is_verified).HasDefaultValueSql("('0')");
            entity.Property(e => e.last_name)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.otp)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.otp_created_at).HasColumnType("datetime");
            entity.Property(e => e.password)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.password_changed_at).HasColumnType("datetime");
            entity.Property(e => e.remember_token)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.updated_at).HasColumnType("datetime");
            entity.Property(e => e.user_url)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.username)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}